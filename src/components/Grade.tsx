import React, { useState } from 'react';
import '../App.css'; 

// Define the type for course data
interface Course {
  name: string;
  grade: string;
}

// Define the GPA points for each grade
const gradePoints: { [key: string]: number } = {
  'A': 4.0,
  'B+': 3.5,
  'B': 3.0,
  'C+': 2.5,
  'C': 2.0,
  'D+': 1.5,
  'D': 1.0,
  'F': 0.0,
  'W': 0.0,
};

// Course list from the image
const courseList: string[] = [
  "‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
  "‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏°",
  "‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ä‡∏¥‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå",
  "‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå",
  "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ",
  "‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏ä‡∏¥‡∏á‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°",
];

const GradeCalculator: React.FC = () => {
  const [courses, setCourses] = useState<Course[]>([]);
  const [selectedCourse, setSelectedCourse] = useState<string>('');
  const [grade, setGrade] = useState<string>('A');
  const [gpa, setGpa] = useState<number>(0);

  const handleAddCourse = () => {
    if (selectedCourse && grade) {
      if (!courses.some(course => course.name === selectedCourse)) {
        const newCourse: Course = { name: selectedCourse, grade: grade };
        setCourses([...courses, newCourse]);
        setSelectedCourse('');
        setGpa(0);
      } else {
        alert("‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!");
      }
    }
  };

  const handleRemoveCourse = (indexToRemove: number) => {
    setCourses(courses.filter((_, index) => index !== indexToRemove));
    setGpa(0);
  };

  const handleCalculateGPA = () => {
    if (courses.length === 0) {
      setGpa(0);
      return;
    }

    let totalPoints = 0;
    let totalCredits = 0;

    const coursesForGPA = courses.filter(course => course.grade !== 'W');

    coursesForGPA.forEach(course => {
      const point = gradePoints[course.grade];
      if (point !== undefined) {
        totalPoints += point;
        totalCredits += 1;
      }
    });

    const calculatedGpa = totalCredits === 0 ? 0 : totalPoints / totalCredits;
    setGpa(parseFloat(calculatedGpa.toFixed(2)));
  };

  return (
    <div className="container">
      <h2 className="header">‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GPA üìù</h2>
      
      <div className="input-form">
        <select
          value={selectedCourse}
          onChange={(e) => setSelectedCourse(e.target.value)}
          required
          className="select-field"
        >
          <option value="" disabled>- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ -</option>
          {courseList.map(c => (
            <option key={c} value={c}>{c}</option>
          ))}
        </select>
        
        <select
          value={grade}
          onChange={(e) => setGrade(e.target.value)}
          className="select-field"
        >
          {Object.keys(gradePoints).map(g => (
            <option key={g} value={g}>{g}</option>
          ))}
        </select>
        
        <button onClick={handleAddCourse} className="button-add">
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
        </button>
      </div>
      
      <div className="course-list">
        <h3 className="subheader">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üìã</h3>
        {courses.length > 0 ? (
          courses.map((course, index) => (
            <div key={index} className={`course-item ${course.grade === 'F' ? 'red-text' : ''}`}>
              <span>
                {course.name} - ‡πÄ‡∏Å‡∏£‡∏î: {course.grade}
              </span>
              <button onClick={() => handleRemoveCourse(index)} className="button-remove">
                ‡∏•‡∏ö
              </button>
            </div>
          ))
        ) : (
          <p className="empty-list">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° üòî</p>
        )}
      </div>
      
      <div className="gpa-display">
        <button onClick={handleCalculateGPA} className="button-calculate">
          ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì GPA
        </button>
        {gpa > 0 && <h3 className="gpa-result">GPA ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: <span>{gpa.toFixed(2)}</span> ‚ú®</h3>}
      </div>
    </div>
  );
};

export default GradeCalculator;